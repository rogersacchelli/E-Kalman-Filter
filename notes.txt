# kalman filter pipeline

first measurement - the filter will receive initial measurements of the bicycle's position relative to the car. 
					These measurements will come from a radar or lidar sensor. 
initialize state and covariance matrices - the filter will initialize the bicycle's position based on the first measurement.

then the car will receive another sensor measurement after a time period Δt.

predict - the algorithm will predict where the bicycle will be after time Δt. One basic way to predict the bicycle location after Δt is to assume the bicycle's velocity is constant; thus the bicycle will have moved velocity * Δt.
update - the filter compares the "predicted" location with what the sensor measurement says. The predicted location and the measured location are combined to give an updated location.
then the car will receive another sensor measurement after a time period Δt. The algorithm then does another predict and update step.

# main cpp

	1 - read input files which contains data from rada and lidar
		1.1 - if radar or lidar, get its values and throw them to an vector structured as its respective format
			Radar:
				ro, phi and ro dot, timestamp and ground truth values
			Lidar:
				x, y, timestamp, ground truth values

	2 - initialize kalman filter variables
		2.1 - process estimation
			2.1.1 - initialize P covariance matrix
			       2.1.1.1 - Initialization of Radar component from polar to cartesian:
			                 ro² = (px²+py²) -> ro² = px² + px²*tan(phi)² -> ro² = px²*(1+tan(phi)²) -> px = ro/sqrt(1+tan(phi)²)
			                 phi = arctan(py/px) -> py/px = tan(phi) -> py = tan(phi)*px
			2.1.2 - initialize F matrix
		2.2 - measurement
			2.2.1 - initialize Q covariance matrix
			2.2.2 - initialize Z matrix
			2.2.3 - initialize K gain matrix
			